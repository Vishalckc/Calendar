Vamsi Nandanavanam & Jaremy Creechley
====================================

DISTRIBUTED CALENDAR  : Part 1
---------------------------

# CS555 Spring 2008
# Programming Assignment 3

## Description
This project includes all the features of Distributed Calendar (part 1) like
adding a calendar entry, deleting a calendar entry, checkpointing ,displaying
personal/other user's calendar entries in addition to the functionality supported by the Identity Server.

##Design
Server:
	The Distributed calendar server supports the basic functionality such
	as adding an entry ,deleting an entry, dispalying the required user's
	entries. All the calendar entries are stored in "CALENDAR" file and
	it is checkpointed frequently. In order to create an entry in the
	calendar file, requested user should be existing on the server
	database. Calendar entries are stored in concurrent hash map using
	UUID as key. This helps to have same Sequence Id / Event id for
	differnet users.
Client:
	The distributed calendar client supports the basic features to test
	the server's functionality. Apart from requesting the server for
	calendar entries and deleting calendar entries,user can check his/her
	local calendar entries which are stored in 'calendar_<username>.cal'
	file. The above naming convention is used to make sure the file is
	accessed by the respective users only.

CalendarDB
	Both the server and client uses the calendardb class ,which has the
	conccurent hashmap implementation.It contains the methods to parse the
	file and store the data into hashmap, write the data into file etc.


Additional Features:
	The client validates the entered time to check if it overlaps with the 
	existing entries or not. If it overlaps, A warning message is printed.However
	the calendar entry would be created.
	

Included is a basic tesh.sh with examples of how to run the code. The basic form is:
	
	java -classpath bin/ identity.client.IdClient localhost 5299 [--command]
	
The IdClient will default to the same default port of the server, 5299 which is on my port list.

To run the server use:

	java -classpath bin/ identity.server.IdentityServer

Where bin/ is the location of the packages.

To build project use
 
	ant build
or 

	ant clean
to clean the project.

The code is commented with javadoc. The basic structure is based on a pure server-client architecture.

There are no callbacks from the client and errors are reported by throwing new UserInfoExceptions.


